" don't need to be compatible with old vi
" not on my default when executing my vimrc, but helps when someone wants
" to use my vimrc at the command line with the -u flag
set nocompatible

" Vim Plug - vim plugin manager: https://github.com/junegunn/vim-plug
" install if necessary
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    " vim plug package installation
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " set up augroup to run installation command, resource and then we won't
    " hit this case next time
    augroup InstallingPlugs
        autocmd!
        autocmd VimEnter * PlugInstall | source $MYVIMRC
    augroup END
endif

" Start plugin manager, specify directory for plugin files
call plug#begin('~/.config/nvim/plugged')

" Plugins section
""""""""""""""""
" Autocomplete "
""""""""""""""""
Plug 'ncm2/ncm2' " https://github.com/ncm2/ncm2, autocompletion plugin
Plug 'roxma/nvim-yarp' " remote plugin manager, doesn't use :UpdateRemotePlugin
" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()
" important: :help Ncm2PopupOpen, :help completeopt for more information
" in order: don't insert match until selected, pop a menu even when only one
" option, don't select a match - force the user to select it from the menu
set completeopt=noinsert,menuone,noselect
" note: you need to install completion sources to get completions. Check
" our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
" thesre are the completion sources to get completions
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-tmux'
Plug 'ncm2/ncm2-path'
" scroll from top to bottom when tabbing by default
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

""""""""""""""
" Commenting "
""""""""""""""
Plug 'scrooloose/nerdcommenter'

""""""""""""""""
" File Finding "
""""""""""""""""
Plug 'scrooloose/nerdtree'
" mapping to open NERDTree
noremap <Leader>f :NERDTree<CR>

"""""""""""""""""""""""
" Syntax Highlighting "
"""""""""""""""""""""""
" Async highlighting
Plug 'neomake/neomake'

"""""""""""
" Styling "
"""""""""""
" Monokai
Plug 'sickill/vim-monokai'
" LightLine
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Tmux line
Plug 'edkolev/tmuxline.vim'

""""""""""""""""""""
" Language Styling "
""""""""""""""""""""

" Markdown styling
Plug 'plasticboy/vim-markdown'

""""""""""""""""""""
" Navigation Tools "
""""""""""""""""""""

" fzf for file finding, need both plugins
" install --bin because we only use this in vim
Plug 'junegunn/fzf', { 'dir': '~/.config/nvim/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
" Modifications for FZF "
" git files
nnoremap <silent> <C-p> :GitFiles<CR>
" file history
nnoremap <silent> <leader>h :History<CR>
" tags in the project (need to be generated)
nnoremap <silent> <leader>t :Tags<CR>
" tags in the current buffer
nnoremap <silent> <leader>b :BTags<CR>


" initialize plugin system
call plug#end()


"""""""""""""""""""""""
" General Preferences "
"""""""""""""""""""""""

" Colors
syntax enable
if !empty(glob('~/.config/nvim/plugged/vim-monokai/colors/monokai.vim'))
    colorscheme monokai
else
    colorscheme default
endif


" Formatting
set fileformat=unix " Make sure the files are always unix
set fileformats=unix " Make sure the files are always unix
set tabstop=4 " number of visual spaces per TAB
set softtabstop=4 " number of spaces in tab when editing
set shiftwidth=4 " number of spaces inserted for indendation
set expandtab " tabs are spaces (tab button = spaces)
set colorcolumn=80 " keep within this column

" UI stuff
set number " show line nums
set showcmd " show last entered command
set cursorline " highlight current line
filetype indent on " load filetype-specific indent files
set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to.
set showmatch " show matching ()
set mouse=a " Turn on mouse mode

" keyboard stuff
" No cheating!
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap jj <ESC> " helps speed up normal mode
set scrolloff=5 " moves file up and down with buffer of 5 lines for cursor

" search stuff
set incsearch " search as characters are entered
set hlsearch " highlight matches
set ignorecase " ignore case if all lowercase search string
set smartcase " don't ignore case if we put a capital letter in search string

" incremental substitution when changing text with %s, you see it in a split
set inccommand=split

" best leader
let mapleader = "\<Space>"

" write hotkey
nnoremap <Leader>w :w<CR>

"""""""""""""""""""""""
" Copying and pasting "
"""""""""""""""""""""""

" copy last yanked text to system clipboard
nnoremap <Leader>m :let @+=@"<CR>

" copy current file path to system clipboard
nnoremap <Leader>fp :let @+=@%<CR>

" Reselecting pasted/yanked text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Paste mode toggle - disable auto indenting, etc.
set pastetoggle=<F2>

"""""""""""""""""""""""
" Syntax Highlighting "
"""""""""""""""""""""""
" Python
let g:neomake_python_enabled_makers = ['flake8']
" Ignore no blank line at end of file error
let g:neomake_python_flake8_args = ['--ignore=W391']

" Neomake
augroup RunNeomake
    autocmd!
    autocmd BufWritePost * Neomake
augroup END

"""""""""""
" Airline "
"""""""""""

" always display the status line in vim
set laststatus=2
"" powerline fonts start
" this should auto populate the airline symbols dict with powerline symbols
let g:airline_powerline_fonts = 1
" but if it doesn't, we can do it manually
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" now add them all
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
"" powerline fonts end

" Enable list of buffers at top of file
let g:airline#extensions#tabline#enabled = 1

" Show just the filename (instead of entire path to file)
let g:airline#extensions#tabline#fnamemod = ':t'

"""""""""""""""""""""
" Buffer Management "
"""""""""""""""""""""

" for editing files in buffers (switch between them without having saved)
set hid
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
" Move to the next buffer
nmap <leader>l :bnext<CR>
" Move to the previous buffer
nmap <leader>k :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>q :bp <BAR> bd #<CR>
" Show all open buffers and their status
nmap <leader>bl :ls<CR>

""""""""
" Misc "
""""""""
" auto cmd to strip whitespace
" first create the function
function! s:StripTrailingWhitespaces()
    " Prep- save last search and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" then create the command group
augroup StripWhiteSpace
    autocmd!
    autocmd BufWritePre :call s:StripTrailingWhitespaces()
augroup END
